
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v
Parsing Verilog input from `/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v' to AST representation.
Generating RTLIL representation for module `\decade'.
Successfully finished Verilog frontend.

-- Running command `tcl /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: decade              
Automatically selected decade as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \decade

4.3.3. Analyzing design hierarchy..
Top module:  \decade
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$47 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8 in module decade.
Marked 2 switch rules as full_case in process $proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3 in module decade.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$30'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$47'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$30'.
Creating decoders for process `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.
     1/1: $1$func$\gpio_out$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:40$2$\gpio_out[6:0]$12
Creating decoders for process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3'.
     1/3: $2\i[31:0]
     2/3: $1\i[31:0]
     3/3: $1\delay[27:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\decade.$func$\gpio_out$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:40$1$\gpio_out' from process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.
No latch inferred for signal `\decade.$func$\gpio_out$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:40$2$\gpio_out' from process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.
No latch inferred for signal `\decade.$func$\gpio_out$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:40$2$\num_i' from process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$47'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$922' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\decade.\delay' using process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3'.
  created $dff cell `$procdff$923' with positive edge clock.
Creating register for signal `\decade.\i' using process `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3'.
  created $dff cell `$procdff$924' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$47'.
Removing empty process `MULT.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$47'.
Removing empty process `Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$30'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.
Removing empty process `Q_FRAG.$proc$/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$29'.
Found and cleaned up 1 empty switch in `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.
Removing empty process `decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:0$8'.
Found and cleaned up 2 empty switches in `\decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3'.
Removing empty process `decade.$proc$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:26$3'.
Cleaned up 8 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 17 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$902.
Removed 1 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 1 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.13. Executing CHECK pass (checking for obvious problems).
checking module decade..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell decade.$add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4 ($add).
Removed top 4 bits (of 32) from port Y of cell decade.$add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4 ($add).
Removed top 7 bits (of 32) from port B of cell decade.$gt$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:28$5 ($gt).
Removed top 27 bits (of 32) from port B of cell decade.$eq$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:31$6 ($eq).
Removed top 30 bits (of 32) from port B of cell decade.$add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:36$7 ($add).
Removed top 1 bits (of 4) from port B of cell decade.$procmux$890_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell decade.$procmux$891_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell decade.$procmux$892_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell decade.$procmux$893_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell decade.$procmux$894_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell decade.$procmux$895_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell decade.$procmux$896_CMP0 ($eq).
Removed top 4 bits (of 32) from wire decade.$add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 2 unused cells and 4 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module decade:
  creating $macc model for $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4 ($add).
  creating $macc model for $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:36$7 ($add).
  creating $alu model for $macc $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:36$7.
  creating $alu model for $macc $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4.
  creating $alu model for $gt$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:28$5 ($gt): new $alu
  creating $alu cell for $gt$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:28$5: $auto$alumacc.cc:485:replace_alu$957
  creating $alu cell for $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:27$4: $auto$alumacc.cc:485:replace_alu$962
  creating $alu cell for $add$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:36$7: $auto$alumacc.cc:485:replace_alu$965
  created 3 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 1 unused cells and 2 unused wires.

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$957
cell type $auto$alumacc.cc:485:replace_alu$962
cell type $auto$alumacc.cc:485:replace_alu$965
cell type $auto$pmuxtree.cc:35:or_generator$936
cell type $auto$pmuxtree.cc:37:or_generator$948
cell type $auto$pmuxtree.cc:37:or_generator$952
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$930
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$932
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$934
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$938
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$940
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$942
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$944
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$946
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$950
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$954
cell type $eq$/home/srinivaas/vaman/vaman_exp/decade_counter/decade_counter.v:31$6
cell type $procdff$923
cell type $procdff$924
cell type $procmux$888_CMP0
cell type $procmux$889_CMP0
cell type $procmux$890_CMP0
cell type $procmux$891_CMP0
cell type $procmux$892_CMP0
cell type $procmux$893_CMP0
cell type $procmux$894_CMP0
cell type $procmux$895_CMP0
cell type $procmux$896_CMP0
cell type $procmux$897_CMP0
cell type $procmux$900
cell type $procmux$905
cell type $procmux$908
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$930:
      Old ports: A=7'0000000, B=7'0000100, Y=$auto$rtlil.cc:2037:Mux$931
      New ports: A=1'0, B=1'1, Y=$auto$rtlil.cc:2037:Mux$931 [2]
      New connections: { $auto$rtlil.cc:2037:Mux$931 [6:3] $auto$rtlil.cc:2037:Mux$931 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$932:
      Old ports: A=7'0100100, B=7'0100000, Y=$auto$rtlil.cc:2037:Mux$933
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$933 [2]
      New connections: { $auto$rtlil.cc:2037:Mux$933 [6:3] $auto$rtlil.cc:2037:Mux$933 [1:0] } = 6'010000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$940:
      Old ports: A=7'0010010, B=7'0000110, Y=$auto$rtlil.cc:2037:Mux$941
      New ports: A=2'10, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$941 [4] $auto$rtlil.cc:2037:Mux$941 [2] }
      New connections: { $auto$rtlil.cc:2037:Mux$941 [6:5] $auto$rtlil.cc:2037:Mux$941 [3] $auto$rtlil.cc:2037:Mux$941 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$944:
      Old ports: A=7'1111111, B=7'0000001, Y=$auto$rtlil.cc:2037:Mux$945
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$945 [1]
      New connections: { $auto$rtlil.cc:2037:Mux$945 [6:2] $auto$rtlil.cc:2037:Mux$945 [0] } = { $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] 1'1 }
  Optimizing cells in module \decade.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$934:
      Old ports: A=$auto$rtlil.cc:2037:Mux$933, B=7'0001111, Y=$auto$rtlil.cc:2037:Mux$935
      New ports: A={ 1'1 $auto$rtlil.cc:2037:Mux$933 [2] 1'0 }, B=3'011, Y={ $auto$rtlil.cc:2037:Mux$935 [5] $auto$rtlil.cc:2037:Mux$935 [2] $auto$rtlil.cc:2037:Mux$935 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$935 [6] $auto$rtlil.cc:2037:Mux$935 [4:3] $auto$rtlil.cc:2037:Mux$935 [1] } = { 2'00 $auto$rtlil.cc:2037:Mux$935 [0] $auto$rtlil.cc:2037:Mux$935 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$942:
      Old ports: A=$auto$rtlil.cc:2037:Mux$941, B=7'1001100, Y=$auto$rtlil.cc:2037:Mux$943
      New ports: A={ $auto$rtlil.cc:2037:Mux$941 [4] 1'0 $auto$rtlil.cc:2037:Mux$941 [2] 1'1 }, B=4'0110, Y=$auto$rtlil.cc:2037:Mux$943 [4:1]
      New connections: { $auto$rtlil.cc:2037:Mux$943 [6:5] $auto$rtlil.cc:2037:Mux$943 [0] } = { $auto$rtlil.cc:2037:Mux$943 [3] 2'00 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$946:
      Old ports: A=$auto$rtlil.cc:2037:Mux$945, B=7'1001111, Y=$auto$rtlil.cc:2037:Mux$947
      New ports: A={ $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] }, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$947 [4] $auto$rtlil.cc:2037:Mux$947 [1] }
      New connections: { $auto$rtlil.cc:2037:Mux$947 [6:5] $auto$rtlil.cc:2037:Mux$947 [3:2] $auto$rtlil.cc:2037:Mux$947 [0] } = { $auto$rtlil.cc:2037:Mux$947 [1] $auto$rtlil.cc:2037:Mux$947 [4] $auto$rtlil.cc:2037:Mux$947 [1] $auto$rtlil.cc:2037:Mux$947 [1] 1'1 }
  Optimizing cells in module \decade.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$938:
      Old ports: A=$auto$rtlil.cc:2037:Mux$935, B={ 4'0000 $auto$rtlil.cc:2037:Mux$931 [2] 2'00 }, Y=$auto$rtlil.cc:2037:Mux$939
      New ports: A={ $auto$rtlil.cc:2037:Mux$935 [5] $auto$rtlil.cc:2037:Mux$935 [2] $auto$rtlil.cc:2037:Mux$935 [0] }, B={ 1'0 $auto$rtlil.cc:2037:Mux$931 [2] 1'0 }, Y={ $auto$rtlil.cc:2037:Mux$939 [5] $auto$rtlil.cc:2037:Mux$939 [2] $auto$rtlil.cc:2037:Mux$939 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$939 [6] $auto$rtlil.cc:2037:Mux$939 [4:3] $auto$rtlil.cc:2037:Mux$939 [1] } = { 2'00 $auto$rtlil.cc:2037:Mux$939 [0] $auto$rtlil.cc:2037:Mux$939 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$950:
      Old ports: A=$auto$rtlil.cc:2037:Mux$947, B=$auto$rtlil.cc:2037:Mux$943, Y=$auto$rtlil.cc:2037:Mux$951
      New ports: A={ $auto$rtlil.cc:2037:Mux$947 [4] $auto$rtlil.cc:2037:Mux$947 [4] $auto$rtlil.cc:2037:Mux$947 [1] $auto$rtlil.cc:2037:Mux$947 [1] $auto$rtlil.cc:2037:Mux$947 [1] 1'1 }, B={ 1'0 $auto$rtlil.cc:2037:Mux$943 [4:1] 1'0 }, Y=$auto$rtlil.cc:2037:Mux$951 [5:0]
      New connections: $auto$rtlil.cc:2037:Mux$951 [6] = $auto$rtlil.cc:2037:Mux$951 [3]
  Optimizing cells in module \decade.
Performed a total of 9 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=28\Y_WIDTH=28 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=28\Y_WIDTH=28 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=28 for cells of type $lcu.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 40 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 126 unused cells and 353 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module decade..
  Treeifying 112 MUXes:
    Found tree with 1 MUXes at root \a.
    Found tree with 3 MUXes at root \b.
    Found tree with 3 MUXes at root \c.
    Found tree with 1 MUXes at root \d.
    Found tree with 5 MUXes at root \e.
    Found tree with 2 MUXes at root \f.
    Found tree with 1 MUXes at root \g.
    Found tree with 1 MUXes at root $0\delay[27:0] [0].
    Found tree with 1 MUXes at root $0\delay[27:0] [1].
    Found tree with 1 MUXes at root $0\delay[27:0] [2].
    Found tree with 1 MUXes at root $0\delay[27:0] [3].
    Found tree with 1 MUXes at root $0\delay[27:0] [4].
    Found tree with 1 MUXes at root $0\delay[27:0] [5].
    Found tree with 1 MUXes at root $0\delay[27:0] [6].
    Found tree with 1 MUXes at root $0\delay[27:0] [7].
    Found tree with 1 MUXes at root $0\delay[27:0] [8].
    Found tree with 1 MUXes at root $0\delay[27:0] [9].
    Found tree with 1 MUXes at root $0\delay[27:0] [10].
    Found tree with 1 MUXes at root $0\delay[27:0] [11].
    Found tree with 1 MUXes at root $0\delay[27:0] [12].
    Found tree with 1 MUXes at root $0\delay[27:0] [13].
    Found tree with 1 MUXes at root $0\delay[27:0] [14].
    Found tree with 1 MUXes at root $0\delay[27:0] [15].
    Found tree with 1 MUXes at root $0\delay[27:0] [16].
    Found tree with 1 MUXes at root $0\delay[27:0] [17].
    Found tree with 1 MUXes at root $0\delay[27:0] [18].
    Found tree with 1 MUXes at root $0\delay[27:0] [19].
    Found tree with 1 MUXes at root $0\delay[27:0] [20].
    Found tree with 1 MUXes at root $0\delay[27:0] [21].
    Found tree with 1 MUXes at root $0\delay[27:0] [22].
    Found tree with 1 MUXes at root $0\delay[27:0] [23].
    Found tree with 1 MUXes at root $0\delay[27:0] [24].
    Found tree with 1 MUXes at root $0\delay[27:0] [25].
    Found tree with 1 MUXes at root $0\delay[27:0] [26].
    Found tree with 1 MUXes at root $0\delay[27:0] [27].
    Found tree with 2 MUXes at root $0\i[31:0] [0].
    Found tree with 2 MUXes at root $0\i[31:0] [1].
    Found tree with 2 MUXes at root $0\i[31:0] [2].
    Found tree with 2 MUXes at root $0\i[31:0] [3].
    Found tree with 2 MUXes at root $0\i[31:0] [4].
    Found tree with 2 MUXes at root $0\i[31:0] [5].
    Found tree with 2 MUXes at root $0\i[31:0] [6].
    Found tree with 2 MUXes at root $0\i[31:0] [7].
    Found tree with 2 MUXes at root $0\i[31:0] [8].
    Found tree with 2 MUXes at root $0\i[31:0] [9].
    Found tree with 2 MUXes at root $0\i[31:0] [10].
    Found tree with 2 MUXes at root $0\i[31:0] [11].
    Found tree with 2 MUXes at root $0\i[31:0] [12].
    Found tree with 2 MUXes at root $0\i[31:0] [13].
    Found tree with 2 MUXes at root $0\i[31:0] [14].
    Found tree with 2 MUXes at root $0\i[31:0] [15].
    Found tree with 2 MUXes at root $0\i[31:0] [16].
    Found tree with 2 MUXes at root $0\i[31:0] [17].
    Found tree with 2 MUXes at root $0\i[31:0] [18].
    Found tree with 2 MUXes at root $0\i[31:0] [19].
    Found tree with 2 MUXes at root $0\i[31:0] [20].
    Found tree with 2 MUXes at root $0\i[31:0] [21].
    Found tree with 2 MUXes at root $0\i[31:0] [22].
    Found tree with 2 MUXes at root $0\i[31:0] [23].
    Found tree with 2 MUXes at root $0\i[31:0] [24].
    Found tree with 2 MUXes at root $0\i[31:0] [25].
    Found tree with 2 MUXes at root $0\i[31:0] [26].
    Found tree with 2 MUXes at root $0\i[31:0] [27].
    Found tree with 2 MUXes at root $0\i[31:0] [28].
    Found tree with 2 MUXes at root $0\i[31:0] [29].
    Found tree with 2 MUXes at root $0\i[31:0] [30].
    Found tree with 2 MUXes at root $0\i[31:0] [31].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$939 [3].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$947 [5].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$947 [6].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$951 [6].
    Finished treeification: Found 71 trees.
  Covering trees:
    Replaced tree at \a: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \b: 0 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \c: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \d: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \e: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \f: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \g: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[27:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\i[31:0] [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$939 [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$947 [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$947 [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$951 [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 1 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module decade:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2923 for $0\i[31:0] [0] -> \i [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1426.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2930 for $0\i[31:0] [1] -> \i [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1427.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2937 for $0\i[31:0] [2] -> \i [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1428.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2944 for $0\i[31:0] [3] -> \i [3].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1429.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2951 for $0\i[31:0] [4] -> \i [4].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1430.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2958 for $0\i[31:0] [5] -> \i [5].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1431.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2965 for $0\i[31:0] [6] -> \i [6].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1432.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2972 for $0\i[31:0] [7] -> \i [7].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1433.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2979 for $0\i[31:0] [8] -> \i [8].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1434.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2986 for $0\i[31:0] [9] -> \i [9].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1435.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2993 for $0\i[31:0] [10] -> \i [10].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1436.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3000 for $0\i[31:0] [11] -> \i [11].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1437.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3007 for $0\i[31:0] [12] -> \i [12].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1438.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3014 for $0\i[31:0] [13] -> \i [13].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1439.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3021 for $0\i[31:0] [14] -> \i [14].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1440.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3028 for $0\i[31:0] [15] -> \i [15].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1441.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3035 for $0\i[31:0] [16] -> \i [16].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1442.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3042 for $0\i[31:0] [17] -> \i [17].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1443.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3049 for $0\i[31:0] [18] -> \i [18].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1444.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3056 for $0\i[31:0] [19] -> \i [19].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1445.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3063 for $0\i[31:0] [20] -> \i [20].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1446.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3070 for $0\i[31:0] [21] -> \i [21].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1447.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3077 for $0\i[31:0] [22] -> \i [22].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1448.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3084 for $0\i[31:0] [23] -> \i [23].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1449.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3091 for $0\i[31:0] [24] -> \i [24].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1450.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3098 for $0\i[31:0] [25] -> \i [25].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1451.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3105 for $0\i[31:0] [26] -> \i [26].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1452.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3112 for $0\i[31:0] [27] -> \i [27].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1453.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3119 for $0\i[31:0] [28] -> \i [28].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1454.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3126 for $0\i[31:0] [29] -> \i [29].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1455.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3133 for $0\i[31:0] [30] -> \i [30].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1456.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3140 for $0\i[31:0] [31] -> \i [31].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1457.

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\decade' to `<abc-temp-dir>/input.blif'..
Extracted 401 gates and 463 wires to a netlist network with 60 inputs and 105 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =     132.
ABC: Participating nodes from both networks       =     398.
ABC: Participating nodes from the first network   =     165. (  82.50 % of nodes)
ABC: Participating nodes from the second network  =     233. ( 116.50 % of nodes)
ABC: Node pairs (any polarity)                    =     165. (  82.50 % of names can be moved)
ABC: Node pairs (same polarity)                   =     155. (  77.50 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      196
ABC RESULTS:        internal signals:      298
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:      105
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 564 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 408 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 196 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 1964 objects in module decade (30 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \decade

4.46.2. Analyzing design hierarchy..
Top module:  \decade
Removed 0 unused modules.

4.47. Printing statistics.

=== decade ===

   Number of wires:                146
   Number of wire bits:            262
   Number of public wires:         146
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                259
     LUT1                            1
     LUT2                           63
     LUT3                           86
     LUT4                           46
     dff                            28
     dffe                           32
     mux4x0                          2
     qlal4s3b_cell_macro             1

4.48. Executing CHECK pass (checking for obvious problems).
checking module decade..
found and reported 0 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on decade.clk[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port decade.a using outpad.
Mapping port decade.b using outpad.
Mapping port decade.c using outpad.
Mapping port decade.d using outpad.
Mapping port decade.e using outpad.
Mapping port decade.f using outpad.
Mapping port decade.g using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 4 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module decade..
found and reported 0 problems.

5. Printing statistics.

=== decade ===

   Number of wires:                267
   Number of wire bits:            267
   Number of public wires:         260
   Number of public wire bits:     260
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                267
     LUT1                            1
     LUT2                           63
     LUT3                           86
     LUT4                           46
     dff                            28
     dffe                           32
     logic_0                         1
     mux4x0                          2
     outpad                          7
     qlal4s3b_cell_macro             1

Loading PCF from '/home/srinivaas/vaman/vaman_exp/decade_counter/confir.pcf'...
Loading pinmap CSV from '/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$decade.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$decade.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$decade.c
  outpad     | d          | 63         | X18Y3    | BIDIR    | $iopadmap$decade.d
  outpad     | e          | 61         | X20Y3    | BIDIR    | $iopadmap$decade.e
  outpad     | f          | 56         | X28Y3    | BIDIR    | $iopadmap$decade.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$decade.g

6. Executing Verilog backend.
Dumping module `\decade'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod$392ad25cb51043645405d50b6207dac59ee6fc10\LUT4 for cells of type LUT4.
Using template dff for cells of type dff.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$78a792e807544314cbd918ff3dc0665065e00762\LUT4 for cells of type LUT4.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$e66e1d4453445205649edd93a5a153125d6a2c45\LUT4 for cells of type LUT4.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$c5e9acd18152fe25e8d316cc57c1d4a38d4a80b7\LUT4 for cells of type LUT4.
Using template $paramod$3c9a80e22449b55125937c206048132eec9a2350\LUT4 for cells of type LUT4.
Using template $paramod$a29fbc6a90f3f74f03beb13f1e9f6984833d21cb\LUT4 for cells of type LUT4.
Using template $paramod$5c78c2936b979d140e9c5335a1758330d6e05c7b\LUT4 for cells of type LUT4.
Using template $paramod$81b18dc250e2014551f846fe165bd14718065020\LUT3 for cells of type LUT3.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template dffe for cells of type dffe.
Using template $paramod$4a30532bc133c2eb9cd5f67b9a7151b65f5b78fc\LUT3 for cells of type LUT3.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$1afc89537ee5f3f94914f73379ca86af781a134c\LUT4 for cells of type LUT4.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template $paramod$88388c6c6a4eecfc7de7604fe66ccab36e5a053a\LUT2 for cells of type LUT2.
Using template $paramod$b9d37cc020d4352bc9144bb4b357b7b62724e0b8\LUT4 for cells of type LUT4.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\outpad for cells of type outpad.
Using template $paramod$730adfb485ed6cef87eb6b434905db0ddfa9b600\LUT2 for cells of type LUT2.
Using template $paramod$6def43ab4e5426cfa47356bf3a9c7d7048c9e188\LUT3 for cells of type LUT3.
Using template $paramod$fe12650b80e312c5bb4db546ed03c40b6321bc03\LUT3 for cells of type LUT3.
Using template $paramod$8d8f09a754c01d4610f61100ccd413fdd3edbde0\LUT4 for cells of type LUT4.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$72dd4379b7d27e2d3f8bb7b284d236064f19b288\LUT3 for cells of type LUT3.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$7e4bd054dbbe83c893326033e721a854d7384b31\LUT3 for cells of type LUT3.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 271 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== decade ===

   Number of wires:               2560
   Number of wire bits:           2677
   Number of public wires:        2531
   Number of public wire bits:    2531
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                266
     ASSP                            1
     BIDIR_CELL                      7
     C_FRAG                         46
     F_FRAG                          1
     Q_FRAG                         60
     T_FRAG                        151

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\decade'.

Warnings: 8 unique messages, 11 total
End of script. Logfile hash: fc1b96369c, CPU: user 2.01s system 0.04s, MEM: 270.95 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/srinivaas/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 56% 18x read_verilog (1 sec), 14% 4x write_verilog (0 sec), ...
