
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v' to AST representation.
Generating RTLIL representation for module `\decade'.
Warning: wire '\d1' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41.4-41.36.
Warning: wire '\d2' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:42.4-42.15.
Warning: wire '\y' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:43.4-43.18.
Warning: wire '\d1' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:51.5-51.37.
Warning: wire '\d2' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:52.5-52.16.
Warning: wire '\y' is assigned in a block at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:53.5-53.19.
Warning: reg '\pin' is assigned in a continuous assignment at /home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67.8-67.23.
/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:43: Warning: Identifier `\y' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `tcl /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: decade              
Automatically selected decade as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \decade

4.3.3. Analyzing design hierarchy..
Top module:  \decade
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63 in module Q_FRAG.
Removed 1 dead cases from process $proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39 in module decade.
Marked 1 switch rules as full_case in process $proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39 in module decade.
Marked 5 switch rules as full_case in process $proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3 in module decade.
Removed a total of 1 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 14 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
  Set init value: \QZ = 1'0
Found init rule in `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$46'.
  Set init value: \q1 = 1'0
  Set init value: \q2 = 1'0
Found init rule in `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:7$45'.
  Set init value: \num1 = 4'0000
Found init rule in `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:6$44'.
  Set init value: \num = 4'0000

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
Creating decoders for process `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$46'.
Creating decoders for process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:7$45'.
Creating decoders for process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:6$44'.
Creating decoders for process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.
     1/1: $1$func$\gpio_out$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:68$2$\gpio_out[2:0]$43
Creating decoders for process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
     1/24: $5\num[3:0]
     2/24: $4\num1[3:0]
     3/24: $4\y[0:0]
     4/24: $4\d2[0:0]
     5/24: $4\d1[0:0]
     6/24: $3\num1[3:0]
     7/24: $4\num[3:0]
     8/24: $3\y[0:0]
     9/24: $3\d2[0:0]
    10/24: $3\d1[0:0]
    11/24: $3\num[3:0]
    12/24: $2\y[0:0]
    13/24: $2\num[3:0]
    14/24: $2\d2[0:0]
    15/24: $2\d1[0:0]
    16/24: $2\num1[3:0]
    17/24: $1\num[3:0]
    18/24: $1\delay[26:0]
    19/24: $1\y[0:0]
    20/24: $1\num1[3:0]
    21/24: $1\d2[0:0]
    22/24: $1\d1[0:0]
    23/24: $0\q2[0:0]
    24/24: $0\q1[0:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\decade.$func$\gpio_out$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:68$1$\gpio_out' from process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.
No latch inferred for signal `\decade.$func$\gpio_out$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:68$2$\gpio_out' from process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.
No latch inferred for signal `\decade.$func$\gpio_out$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:68$2$\num_i' from process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1114' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\decade.\d1' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1115' with positive edge clock.
Creating register for signal `\decade.\d2' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1116' with positive edge clock.
Creating register for signal `\decade.\delay' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1117' with positive edge clock.
Creating register for signal `\decade.\num' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1118' with positive edge clock.
Creating register for signal `\decade.\num1' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1119' with positive edge clock.
Creating register for signal `\decade.\q1' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1120' with positive edge clock.
Creating register for signal `\decade.\q2' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1121' with positive edge clock.
Creating register for signal `\decade.\y' using process `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
  created $dff cell `$procdff$1122' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
Removing empty process `MULT.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$81'.
Removing empty process `Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$64'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Removing empty process `Q_FRAG.$proc$/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$63'.
Removing empty process `decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$46'.
Removing empty process `decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:7$45'.
Removing empty process `decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:6$44'.
Found and cleaned up 1 empty switch in `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.
Removing empty process `decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:0$39'.
Found and cleaned up 5 empty switches in `\decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
Removing empty process `decade.$proc$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:28$3'.
Cleaned up 11 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 16 unused cells and 118 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 10 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1007.
    dead port 1/2 on $mux $procmux$1010.
    dead port 2/2 on $mux $procmux$1016.
    dead port 1/2 on $mux $procmux$1019.
    dead port 2/2 on $mux $procmux$1025.
    dead port 1/2 on $mux $procmux$1028.
    dead port 1/2 on $mux $procmux$1040.
    dead port 1/2 on $mux $procmux$1046.
    dead port 1/2 on $mux $procmux$1052.
    dead port 1/2 on $mux $procmux$1058.
    dead port 1/2 on $mux $procmux$929.
    dead port 1/2 on $mux $procmux$932.
    dead port 1/2 on $mux $procmux$935.
    dead port 1/2 on $mux $procmux$941.
    dead port 1/2 on $mux $procmux$944.
    dead port 1/2 on $mux $procmux$947.
    dead port 1/2 on $mux $procmux$962.
    dead port 1/2 on $mux $procmux$965.
    dead port 1/2 on $mux $procmux$971.
    dead port 1/2 on $mux $procmux$974.
    dead port 1/2 on $mux $procmux$980.
    dead port 1/2 on $mux $procmux$983.
    dead port 1/2 on $mux $procmux$989.
    dead port 1/2 on $mux $procmux$992.
Removed 24 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
    New ctrl vector for $pmux cell $procmux$920: { $procmux$924_CMP $procmux$922_CMP $auto$opt_reduce.cc:134:opt_mux$1124 }
  Optimizing cells in module \decade.
Performed a total of 1 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 34 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.13. Executing CHECK pass (checking for obvious problems).
checking module decade..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4 ($add).
Removed top 5 bits (of 32) from port Y of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4 ($add).
Removed top 7 bits (of 32) from port B of cell decade.$gt$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:31$5 ($gt).
Removed top 31 bits (of 32) from port B of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:34$6 ($add).
Removed top 28 bits (of 32) from port Y of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:34$6 ($add).
Removed top 1 bits (of 4) from port B of cell decade.$eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:47$20 ($eq).
Removed top 1 bits (of 4) from port B of cell decade.$eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:47$21 ($eq).
Removed top 31 bits (of 32) from port B of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36 ($add).
Removed top 28 bits (of 32) from port Y of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36 ($add).
Removed top 30 bits (of 32) from port B of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38 ($add).
Removed top 30 bits (of 32) from port Y of cell decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38 ($add).
Removed top 1 bits (of 2) from port B of cell decade.$procmux$923_CMP0 ($eq).
Removed top 5 bits (of 32) from wire decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4_Y.
Removed top 28 bits (of 32) from wire decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36_Y.
Removed top 30 bits (of 32) from wire decade.$add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38_Y.
Removed top 1 bits (of 3) from wire decade.pin.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 1 unused cells and 7 unused wires.

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module decade:
  creating $macc model for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4 ($add).
  creating $macc model for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:34$6 ($add).
  creating $macc model for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36 ($add).
  creating $macc model for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38 ($add).
  creating $alu model for $macc $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38.
  creating $alu model for $macc $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36.
  creating $alu model for $macc $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:34$6.
  creating $alu model for $macc $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4.
  creating $alu model for $gt$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:31$5 ($gt): new $alu
  creating $alu cell for $gt$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:31$5: $auto$alumacc.cc:485:replace_alu$1134
  creating $alu cell for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:30$4: $auto$alumacc.cc:485:replace_alu$1139
  creating $alu cell for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:34$6: $auto$alumacc.cc:485:replace_alu$1142
  creating $alu cell for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:58$36: $auto$alumacc.cc:485:replace_alu$1145
  creating $alu cell for $add$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:67$38: $auto$alumacc.cc:485:replace_alu$1148
  created 5 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 1 unused cells and 2 unused wires.

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$1134
cell type $auto$alumacc.cc:485:replace_alu$1139
cell type $auto$alumacc.cc:485:replace_alu$1142
cell type $auto$alumacc.cc:485:replace_alu$1145
cell type $auto$alumacc.cc:485:replace_alu$1148
cell type $auto$opt_reduce.cc:128:opt_mux$1123
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1129
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1131
cell type $eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:38$7
cell type $eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:47$20
cell type $eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:47$21
cell type $eq$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:56$35
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$10
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$12
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$13
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$9
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:42$16
cell type $logic_and$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:47$22
cell type $logic_not$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$11
cell type $logic_not$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$8
cell type $logic_or$/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.v:41$14
cell type $procdff$1115
cell type $procdff$1116
cell type $procdff$1117
cell type $procdff$1118
cell type $procdff$1119
cell type $procdff$1120
cell type $procdff$1121
cell type $procmux$1005
cell type $procmux$1014
cell type $procmux$1023
cell type $procmux$1037
cell type $procmux$1043
cell type $procmux$1049
cell type $procmux$1055
cell type $procmux$1061
cell type $procmux$1064
cell type $procmux$1070
cell type $procmux$1073
cell type $procmux$1076
cell type $procmux$1079
cell type $procmux$1082
cell type $procmux$1085
cell type $procmux$1088
cell type $procmux$1091
cell type $procmux$1094
cell type $procmux$1097
cell type $procmux$1100
cell type $procmux$921_CMP0
cell type $procmux$922_CMP0
cell type $procmux$923_CMP0
cell type $procmux$926
cell type $procmux$938
cell type $procmux$959
cell type $procmux$968
cell type $procmux$977
cell type $procmux$986
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 2 unused wires.

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1129:
      Old ports: A=3'001, B=3'100, Y=$auto$rtlil.cc:2037:Mux$1130
      New ports: A=2'01, B=2'10, Y={ $auto$rtlil.cc:2037:Mux$1130 [2] $auto$rtlil.cc:2037:Mux$1130 [0] }
      New connections: $auto$rtlil.cc:2037:Mux$1130 [1] = 1'0
  Optimizing cells in module \decade.
Performed a total of 1 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \decade..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \decade.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\decade'.
Removed a total of 15 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 92 unused cells and 265 unused wires.

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module decade..
  Treeifying 81 MUXes:
    Found tree with 1 MUXes at root \redled.
    Found tree with 1 MUXes at root \greenled.
    Found tree with 4 MUXes at root $0\d1[0:0].
    Found tree with 4 MUXes at root $0\d2[0:0].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 5 MUXes at root $0\num[3:0] [0].
    Found tree with 5 MUXes at root $0\num[3:0] [1].
    Found tree with 5 MUXes at root $0\num[3:0] [2].
    Found tree with 5 MUXes at root $0\num[3:0] [3].
    Found tree with 4 MUXes at root $0\num1[3:0] [0].
    Found tree with 4 MUXes at root $0\num1[3:0] [1].
    Found tree with 4 MUXes at root $0\num1[3:0] [2].
    Found tree with 4 MUXes at root $0\num1[3:0] [3].
    Found tree with 4 MUXes at root $0\q1[0:0].
    Found tree with 4 MUXes at root $0\q2[0:0].
    Finished treeification: Found 41 trees.
  Covering trees:
    Replaced tree at \redled: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \greenled: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d1[0:0]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d2[0:0]: 1 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[3:0] [0]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[3:0] [1]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[3:0] [2]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[3:0] [3]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num1[3:0] [0]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num1[3:0] [1]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num1[3:0] [2]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num1[3:0] [3]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q1[0:0]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\q2[0:0]: 4 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 1 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module decade:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2377 for $0\d1[0:0] -> \d1.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1437.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2384 for $0\d2[0:0] -> \d2.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1438.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2420 for $0\num1[3:0] [0] -> \num1 [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1470.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2456 for $0\num1[3:0] [1] -> \num1 [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1471.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2492 for $0\num1[3:0] [2] -> \num1 [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1472.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2528 for $0\num1[3:0] [3] -> \num1 [3].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1473.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2577 for $0\q1[0:0] -> \q1.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1474.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2626 for $0\q2[0:0] -> \q2.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1475.

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\decade' to `<abc-temp-dir>/input.blif'..
Extracted 297 gates and 342 wires to a netlist network with 44 inputs and 52 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =      93.
ABC: Participating nodes from both networks       =     263.
ABC: Participating nodes from the first network   =      98. (  84.48 % of nodes)
ABC: Participating nodes from the second network  =     165. ( 142.24 % of nodes)
ABC: Node pairs (any polarity)                    =      98. (  84.48 % of names can be moved)
ABC: Node pairs (same polarity)                   =      92. (  79.31 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      113
ABC RESULTS:        internal signals:      246
ABC RESULTS:           input signals:       44
ABC RESULTS:          output signals:       52
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 442 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110011001010 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 268 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 110 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 1478 objects in module decade (27 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \decade

4.46.2. Analyzing design hierarchy..
Top module:  \decade
Removed 0 unused modules.

4.47. Printing statistics.

=== decade ===

   Number of wires:                 93
   Number of wire bits:            190
   Number of public wires:          93
   Number of public wire bits:     190
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                156
     LUT2                           31
     LUT3                           59
     LUT4                           20
     dff                            31
     dffe                            8
     mux4x0                          6
     qlal4s3b_cell_macro             1

4.48. Executing CHECK pass (checking for obvious problems).
checking module decade..
Warning: Wire decade.num has an unprocessed 'init' attribute.
Warning: Wire decade.num1 has an unprocessed 'init' attribute.
Warning: Wire decade.q1 has an unprocessed 'init' attribute.
Warning: Wire decade.q2 has an unprocessed 'init' attribute.
found and reported 4 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on decade.clk[0].

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port decade.greenled using outpad.
Mapping port decade.num using outpad.
Mapping port decade.num1 using outpad.
Mapping port decade.redled using outpad.
Mapping port decade.x using inpad.
Mapping port decade.yellowled using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 32 unused wires.

4.55. Executing CHECK pass (checking for obvious problems).
checking module decade..
found and reported 0 problems.

5. Printing statistics.

=== decade ===

   Number of wires:                172
   Number of wire bits:            172
   Number of public wires:         161
   Number of public wire bits:     161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                169
     LUT2                           31
     LUT3                           59
     LUT4                           20
     dff                            31
     dffe                            8
     inpad                           1
     logic_0                         1
     mux4x0                          6
     outpad                         11
     qlal4s3b_cell_macro             1

Loading PCF from '/home/jithendra/qorc-sdk/fpga-examples/traffic/boolean.pcf'...
Loading pinmap CSV from '/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | greenled   | 62         | X16Y3    | BIDIR    | $iopadmap$decade.greenled
  outpad     | num(0)     | 60         | X22Y3    | BIDIR    | $iopadmap$decade.num
  outpad     | num1(0)    | 55         | X30Y3    | BIDIR    | $iopadmap$decade.num1
  outpad     | num1(1)    | 54         | X32Y3    | BIDIR    | $iopadmap$decade.num1_1
  outpad     | num1(2)    | 53         | X34Y3    | BIDIR    | $iopadmap$decade.num1_2
  outpad     | num1(3)    | 40         | X34Y32   | BIDIR    | $iopadmap$decade.num1_3
  outpad     | num(1)     | 59         | X24Y3    | BIDIR    | $iopadmap$decade.num_1
  outpad     | num(2)     | 57         | X26Y3    | BIDIR    | $iopadmap$decade.num_2
  outpad     | num(3)     | 56         | X28Y3    | BIDIR    | $iopadmap$decade.num_3
  outpad     | redled     | 3          | X12Y3    | BIDIR    | $iopadmap$decade.redled
  inpad      | x          | 42         | X32Y32   | BIDIR    | $iopadmap$decade.x
  outpad     | yellowled  | 64         | X14Y3    | BIDIR    | $iopadmap$decade.yellowled

6. Executing Verilog backend.
Dumping module `\decade'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template dff for cells of type dff.
Using template $paramod$ebab70a5830b6a9f5483ac0ce1c2f41b14b4eddd\LUT3 for cells of type LUT3.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$78a792e807544314cbd918ff3dc0665065e00762\LUT4 for cells of type LUT4.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$3d8388c6e77681f3dd296c4ac76cfa8c66f7077b\LUT3 for cells of type LUT3.
Using template $paramod$d169107a3cf5d6fef6c02e2344a85f9a2f6a4adb\LUT4 for cells of type LUT4.
Using template $paramod$209ae4a08fba98890f4aad9b068286cb99f39aa0\LUT4 for cells of type LUT4.
Using template $paramod$e115536dba900bda0d3ebd5f283e79fa53fba256\LUT4 for cells of type LUT4.
Using template $paramod$2c16e524d34079620431678c7f0a8026eb93e228\LUT4 for cells of type LUT4.
Using template $paramod$b8e400b0c524196854471b6867fb4998e798de7d\LUT3 for cells of type LUT3.
Using template $paramod$7aa23c7ddff975c77e13b2562382ff5ba7506ebe\LUT4 for cells of type LUT4.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$74c28f72ff7c91a3fe0f7436b6cf3d08c50bd720\LUT4 for cells of type LUT4.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$e1beab283bf99dd23b48ee02b86ca48390975efa\LUT4 for cells of type LUT4.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$9e35db09801d44e7d3829ca6d3166367119eac5f\LUT3 for cells of type LUT3.
Using template dffe for cells of type dffe.
Using template $paramod$c50629772bb8827234fdc3e9ca2a8ac7a0f84632\inpad for cells of type inpad.
Using template $paramod$4a30532bc133c2eb9cd5f67b9a7151b65f5b78fc\LUT3 for cells of type LUT3.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$3d8b5074d7a57ec09a018a5522f0514962b45f9f\LUT3 for cells of type LUT3.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$20836409dd4d4eddd1bf52e531e01fc3f9ef0633\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$2c475bfb33a84408237163aa5b74c1e4b533cae5\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$ae47c976ba5930346fb14d9bb1acd7fd0cc69258\outpad for cells of type outpad.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module decade.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \decade..
Removed 0 unused cells and 194 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== decade ===

   Number of wires:               1465
   Number of wire bits:           1582
   Number of public wires:        1432
   Number of public wire bits:    1432
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                168
     ASSP                            1
     BIDIR_CELL                     12
     C_FRAG                         20
     Q_FRAG                         39
     T_FRAG                         96

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\decade'.

Warnings: 20 unique messages, 23 total
End of script. Logfile hash: 19bb4cff33, CPU: user 2.60s system 0.11s, MEM: 271.94 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/jithendra/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 59% 18x read_verilog (1 sec), 10% 4x write_verilog (0 sec), ...
